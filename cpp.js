{
    "CPP": {
    "prefix": "hekk",
    "body": [
      "/*",
      "  \"I knew I shouldn't have",
      "   gotten out of bed today.\"",
      "   - Squidward Q.Tentacles",
      "*/",
      "#include<iostream>",
      "#include<algorithm>",
      "#include<bitset>",
      "#include<cmath>",
      "#include<cstring>",
      "#include<climits>",
      "#include<numeric>",
      "#include<random>",
      "#include<fstream>",
      "#include<chrono>",
      "",
      "#include<deque>",
      "#include<queue>",
      "#include<vector>",
      "#include<list>",
      "#include<set>",
      "#include<map>",
      "#include<unordered_map>",
      "// #include<ext/pb_ds/assoc_container.hpp>",
      "// #include<ext/pb_ds/tree_policy.hpp>",
      "// using namespace __gnu_pbds;",
      "using namespace std;",
      "",
      "#define int          long long",
      "#define ld           long double",
      "#define pii          pair<int,int>",
      "#define vi           vector<int>",
      "#define maxpq        priority_queue<int>",
      "#define minpq        priority_queue<int,vi,greater<int>>",
      "#define pb           push_back",
      "#define mp           make_pair",
      "#define ff           first",
      "#define ss           second",
      "#define endl         '\\n'",
      "#define rep(i,s,e)   for(int i=s;i<=e;i++)",
      "#define brep(i,s,e)  for(int i=s;i>=e;i--)",
      "#define all(x)       (x).begin(),(x).end()",
      "#define ball(x)      (x).rbegin(),(x).rend()",
      "#define sz(x)        (int)x.size()",
      "#define mem(x,y)     memset(x,y,sizeof(x))",
      "#define milf(x)      x.reserve(1LL<<14LL); x.max_load_factor(0.25);",
      "#define pbds         tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>",
      "#define VR46         ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);",
      "mt19937              rng(chrono::steady_clock::now().time_since_epoch().count());",
      "",
      "const int MOD = 1e9+7;",
      "ld EPS = 1e-12;",
      "const int INF32 = 0x3F3F3F3F;",
      "const int INF = 0x3F3F3F3F3F3F3F3F;",
      "const int crng = rng();",
      "",
      "signed main()",
      "{",
      "    VR46 ofstream out(\"output.txt\");",
      "    // auto start = chrono::high_resolution_clock::now();",
      "",
      "    // GANDU TEST CASE BNAKE TEST KRLE; CHECK BOUNDS;",
      "    // int t; cin>>t; rep(test,1,t)",
      "    {",
      "        $1",
      "    }",
      "",
      "    // auto stop = chrono::high_resolution_clock::now();",
      "    // auto duration = chrono::duration_cast<chrono::milliseconds>(stop - start); ",
      "    // cout<<\"Time taken by function: \"<<duration.count()<<\" milliseconds\"<<endl;",
      "",
      "    // *( hsh.find_by_order(k) ) kth smallest, from 0",
      "    // hsh.order_of_key(k) num of ele str less than k",
      "    // change less to less_equal for multiset pbds",
      "    // Create struct HASH; Use milf(x) for every hashmap; Use CRNG xor;",
      "}"
    ],
    "description": "CPP"
    }
}
